ALGORITMO

def ordenarTimes(vetor times, int prox, vetor solução, matriz vitorias):

	solução_nova = vetor []

	se times.tam == 0 e solução.tam > 0 e vitorias[solução[-1]][prox]:
		retorne solução + [prox]

	senão se times.tam == 1 e solução.tam == 0: retorne times

	senão se solução.tam == 0 ou vitorias[solução[-1]][prox] == solução[-1]:
		para i = 0 -> times.tam:
			times_reman = times[:i] + times[i+1:]
			solução_nova = ordenarTimes(times_reman, times[i], solução += [prox], vitorias)
			se solução_nova.tam > 0: quebre

	retorne solução_nova


CORRETUDE

Seja times = [t1, t2, ... tn, ...] o vetor de times a ser ordenado.

Invariante de laço para ambos os laços em (5) e em (12):
	Quando o valor de prox = tj e solução = [..., ti], então solução_nova = [..., ti, tj] se ti venceu tj.
	O valor de times_reman é o vetor formado pelos elementos de times menos tj.

1. Casos base:
	Quando o tamanho da instância é 0:
		O valor de 'solução' será um vetor vazio, e isto será retornado em (2), o que está correto.
	Quando o tamanho da instância é 1:
		O valor de 'solução' deve ser um vetor contendo o único valor da instância. Isso é verificado em (3).

